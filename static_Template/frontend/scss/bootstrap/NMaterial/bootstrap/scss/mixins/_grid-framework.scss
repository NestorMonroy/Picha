// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @if $columns > 0 {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        min-width: 0; // See https://github.com/twbs/bootstrap/issues/25410
        max-width: 100%;
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }

      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }

      @if $columns > 0 {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
// @mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
//   @for $i from (1 + 1) through $grid-columns {
//     $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
//   }
//   #{$list} {
//     position: relative;
//     // Prevent columns from collapsing when empty
//     min-height: 1px;
//     // Inner gutter via padding
//     padding-right: floor(($grid-gutter-width / 2));
//     padding-left: ceil(($grid-gutter-width / 2));
//   }
// }


// // [converter] This is defined recursively in LESS, but Sass supports real loops
// @mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
//   @for $i from (1 + 1) through $grid-columns {
//     $list: "#{$list}, .col-#{$class}-#{$i}";
//   }
//   #{$list} {
//     float: left;
//   }
// }


// @mixin calc-grid-column($index, $class, $type) {
//   @if ($type == width) and ($index > 0) {
//     .col-#{$class}-#{$index} {
//       width: percentage(($index / $grid-columns));
//     }
//   }
//   @if ($type == push) and ($index > 0) {
//     .col-#{$class}-push-#{$index} {
//       left: percentage(($index / $grid-columns));
//     }
//   }
//   @if ($type == push) and ($index == 0) {
//     .col-#{$class}-push-0 {
//       left: auto;
//     }
//   }
//   @if ($type == pull) and ($index > 0) {
//     .col-#{$class}-pull-#{$index} {
//       right: percentage(($index / $grid-columns));
//     }
//   }
//   @if ($type == pull) and ($index == 0) {
//     .col-#{$class}-pull-0 {
//       right: auto;
//     }
//   }
//   @if ($type == offset) {
//     .col-#{$class}-offset-#{$index} {
//       margin-left: percentage(($index / $grid-columns));
//     }
//   }
// }

// // [converter] This is defined recursively in LESS, but Sass supports real loops
// @mixin loop-grid-columns($columns, $class, $type) {
//   @for $i from 0 through $columns {
//     @include calc-grid-column($i, $class, $type);
//   }
// }


// // Create grid for specific class
// @mixin make-grid($class) {
//   @include float-grid-columns($class);
//   @include loop-grid-columns($grid-columns, $class, width);
//   @include loop-grid-columns($grid-columns, $class, pull);
//   @include loop-grid-columns($grid-columns, $class, push);
//   @include loop-grid-columns($grid-columns, $class, offset);
// }
